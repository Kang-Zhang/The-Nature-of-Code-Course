== The Nature of Code

* Spring 2012

* Section 1: Tuesdays 12:30 - 3:00 pm

* Section 2: Wednesdays 12:30 - 3:00 pm

* Daniel Shiffman, daniel.shiffman@nyu.edu

* https://itp.nyu.edu/inwiki/Signup/Shiffman[Office Hours Signup]


=== Important Sites

* Draft Book PDFS: http://itp.nyu.edu/varwiki/Nature/Book[http://itp.nyu.edu/varwiki/Nature/Book]

* Code Examples: https://github.com/shiffman/The-Nature-of-Code[https://github.com/shiffman/The-Nature-of-Code]

* Mailing list: https://groups.google.com/a/itp.nyu.edu/group/natureofcode/[https://groups.google.com/a/itp.nyu.edu/group/natureofcode/]

* http://itp.nyu.edu/varwiki/Nature/Nature[Homework and other wikis]

* Delicious links: http://del.icio.us/tag/natureofcode[http://del.icio.us/tag/natureofcode]

* Twitter: https://twitter.com/#!/search/%23natureofcode[#natureofcode]


=== Syllabus

*Week 1 -- Jan 24/25 -- http://www.shiffman.net/teaching/nature/week-1/[Numbers] and http://processing.org/learning/pvector/[Vectors]*

* Class Intro / Overview

* http://www.processing.org[Processing] review

* Randomness, Probability, and Perlin Noise

* Object Oriented Programming Review & Vectors

* Assignment: Sign up for the class mailing list: https://groups.google.com/a/itp.nyu.edu/group/natureofcode/[https://groups.google.com/a/itp.nyu.edu/group/natureofcode/]

* Assignment:  The exercises below are suggestions, for this first week's assignment a more open-ended wording might read: "Experiment with motion in Processing."

** Take a look through the random walker examples (shared via dropbox, also https://github.com/shiffman/The-Nature-of-Code/tree/master/prologue[on github]).   Create your own (not so random?) walker.  Post a link to your work, as well as any thoughts on the above, on the http://itp.nyu.edu/varwiki/Nature/Nature[homework wiki]. Some ideas:

    ** Try implementing the "self-avoiding walk": http://en.wikipedia.org/wiki/Self-avoiding_walk[http://en.wikipedia.org/wiki/Self-avoiding_walk]

    ** Try implement the random walk known as a Levy Flight: http://en.wikipedia.org/wiki/L%C3%A9vy_flight[http://en.wikipedia.org/wiki/L%C3%A9vy_flight]

    ** Try a walk in 3D: See: http://en.wikipedia.org/wiki/Quantum_Cloud[http://en.wikipedia.org/wiki/Quantum_Cloud]

    ** Use the random walker as a template to simulate some real-world "natural" motion. Can you develop a set of rules for simulating that behavior?  Ideas: nervous fly, hopping bunny, slithering snake, etc.  (Consider the challenge of using minimal visual design, i.e. b&w primitive shapes.  Can you give your "being" a personality?  Can it express emotions -- happiness, sadness, fear, etc.?  

* Reading: http://www.processing.org/learning/pvector/[Processing PVector tutorial], also http://itp.nyu.edu/varwiki/Nature/Book[available as PDF]. 

* PDF Handout about probability (available via course mailing list)

* http://www.amazon.com/gp/product/1584503300/[Mathematics and Physics for Programmers], Chapter 5 -- Vectors, Danny Kodicek

* Reading: http://cognet.mit.edu/library/books/view?isbn=0262062003[Computational Beauty of Nature], Introduction, Gary William Flake (you must be logged in through NYU to access the online version.)

* Reading: http://www.probabilitytheory.info/[Probability Theory] -- great friendly site!


*Week 2 -- Jan 31/Feb 1 -- http://processing.org/learning/pvector/[Vectors] and Forces*


* Object Oriented Programming Review & Vectors

* Attraction/Repulsion

* Friction/Drag

* Core material

** http://itp.nyu.edu/varwiki/Nature/Book[Chapter 2 from Nature of Code book]

** Code: https://github.com/shiffman/The-Nature-of-Code/tree/master/chp2_forces[https://github.com/shiffman/The-Nature-of-Code/tree/master/chp2_forces]
    
* Supplemental reading:

** http://www.lightandmatter.com/area1book1.html[Newtonian Physics, An Online Textbook] (This is long, you may find Chapter 4 to be particularly relevant to this week's discussion.)

** http://www.physicsclassroom.com/Class/newtlaws/newtltoc.html[The Physics Classroom -- Newton's Laws]

** http://www.amazon.com/gp/product/1584503300/[Mathematics and Physics for Programmers], Chapters 12 and 14, Danny Kodicek (suggested)

* Homework (choose one / create your own) Post your work on the http://itp.nyu.edu/varwiki/Nature/Nature[wiki]:

** Rework your motion sketch from week 1 using PVector.  Try incorporating the concept of _forces_ into the environment by affecting _only_ the acceleration.   Create a formula for calculating a dynamic acceleration, one that changes over time based on any number of factors.  What happens if you make more than one object via an array.

** Using forces, simulate a helium-filled balloon floating upward (and bouncing off the top of a window).  Can you add a wind force which changes over time, perhaps according to Perlin noise?

** Create an example where instead of objects bouncing off the edge of the wall, an invisible force pushes back on the objects to keep them in the window.  Can you weight the force according to how far the object is from an edge, i.e. the closer it is, the stronger the force?   

** Create pockets of air resistance / friction in a Processing sketch.  Try using circles instead of rectangles, i.e. pockets of mud (or ice).  What if you vary the strength (drag / friction coefficient) of each circle?   What if you make some of them the opposite of drag—i.e., when you enter a given pocket you actually speed up instead of slow down?

** Can you create an example where all of the Mover objects are attracted to the mouse, but repel each other?  Think about how you need to balance the relative strength of the forces and how to most effectively use distance in your force calculations.

** Research a force not covered in class and implement it as a vector.

** Use the concept of forces to visualize some input (could be data, literal example would be get windspeed online and translate to a wind force in Processing, but feel free to think more abstractly)

** Build a sketch that has both "Movers" and "Attractors".  What if you make the Attractors invisible?  Can you create a pattern / design from the trails of objects moving around attractors?  See the http://processing.org/exhibition/works/metropop/[Metropop Denim project by Clayton Cubitt and Tom Carden] for an example.

*Week 3 -- Feb 7/8 -- Oscillations*

* Trigonometry

* Polar vs. Cartesian Coordinates

* Pendulum

* Graphing waves (perlin noise waves)

* 2D trig equation graphing ("graphing inequalities")

* Core material
** http://itp.nyu.edu/varwiki/Nature/Book[Chapter 3 from Nature of Code book]

** Code: https://github.com/shiffman/The-Nature-of-Code/tree/master/chp3_oscillation[https://github.com/shiffman/The-Nature-of-Code/tree/master/chp3_oscillation]

* Supplemental Reading:

** The Mathematics of Oscillatory Motion (refer to e-mail to class list.)

** http://www.phy6.org/stargaze/Strig1.htm[Trigonometry, What is it good for?] (follow along to 7 parts)

** http://www.amazon.com/gp/product/1584503300/[Mathematics and Physics for Programmers], Chapter 4, Danny Kodicek (suggested)    

* Assignment: Incorporate oscillatory motion into a previous assignment (or create a new one).  Some suggestions:

** Rewrite the above Oscillator class so that each object doesn't simply oscillate around the middle of the Processing window (width/2,height/2), but around a moving point.  In other words, design a creature that moves around the screen according to location, velocity, and acceleration.  But that creature isn't just a static shape, it's an oscillating body.  Consider tying the speed of oscillation to the speed of motion.  Think of a butterfly's flapping wings or the legs of an insect.  Can you make it appear that the creature's internal mechanics (oscillation) drive its locomotion?  (See "AttractionArrayWithOscillation" example as a model). 

** Create a simulation where objects are shot out of a cannon.  Each object should experience a sudden force when shot (just once) as well as gravity (always present).   Add rotation to the object to model its spin as its shot from the cannon.  How realistic can you make it look?

** Create a simulation of a vehicle that you can drive around the screen using the arrow keys: left arrow accelerates the car to the left, right to the right.  The car should point in the direction it is currently moving.

** Simulate the spaceship in the game Asteroids.   In case you aren't familiar with Asteroids, here is a brief description.   A spaceship (represented as a triangle) floats in two dimensional space.   The left arrow keys turns the spaceship counter-clockwise, the right clock-wise.  The space bar applies a “thrust“ force in the direction the spaceship is pointing.   See "_03_asteroids" example for sample answer.

** String together a series of pendulums so that the endpoint of one is the origin point of another.

** Use trigonometry to model a box sliding down an incline with friction.  Note that the magnitude of the friction force is equal to the normal force. 

** Rework the wave examples to have a Wave class and visualize the wave using something other than circles. http://www.shiffman.net/itp/classes/nature/week04_s09/OOPWave.zip[Example Answer (minus the change in visualization)]

** Using the Spring example as a basis, create a system of multiple bobs and spring connections.  How would you have a Bob connected to a Bob with no fixed anchor?

** Research and implement a simulation of http://en.wikipedia.org/wiki/Torque[Torque].
    
*Week 4 -- Feb 14/15-- Particle Systems*

* ArrayLists

* Advanced Object Oriented Programming -- Inheritance and Polymorphism

* Core material

** http://itp.nyu.edu/varwiki/Nature/Book[Chapter 4 from Nature of Code book]

** Code: https://github.com/shiffman/The-Nature-of-Code/tree/master/chp4_systems[https://github.com/shiffman/The-Nature-of-Code/tree/master/chp4_systems]

** Flight404's Particle example: http://www.flight404.com/blog/?p=113[http://www.flight404.com/blog/?p=113], see github for updated version for Processing 2.0a4

* Supplemental Reading

** http://doi.acm.org/10.1145/97879.97923["Particle animation and rendering using data parallel computation", Karl Sims] (available via NYU network/proxy)

** http://doi.acm.org/10.1145/357318.357320["Particle Systems, a Technique for Modeling a Class of Fuzzy Objects", Reeves] (available via NYU network/proxy)

** http://www.javaranch.com/campfire/StoryPoly.jsp[How my Dog learned Polymorphism]

** http://www.siggraph.org/education/materials/HyperGraph/animation/particle.htm[Particle Systems (Siggraph)], http://www.cs.unc.edu/+++~+++davemc/Particle/[Particle System API, by David K. McAllister], http://www.cs.wpi.edu/+++~+++matt/courses/cs563/talks/psys.html[Particle Systems by Allen Martin]
    
* Homework exercise -- At this point we're a bit deeper in the semester and approaching the midterm project.  Feel free to simply start on a midterm idea or continue something you've been working on previously.  If you would like to try an exercise related to particle systems, here are some suggestions:
** Use a particle system in the design of a "Mover" object.  In other words take, say, one of our earlier examples and instead of rendering a Mover object as a simple circle, emit particles from the mover's location.  Consider using the http://www.shiffman.net/2011/02/13/asteroids-spaceship/[Asteroids] example and emit particles from the ship when a thrust force is applied.

** Create a particle system where the particles respond to each other via forces.  For example, what if you connect the particles with spring forces?  Or an attraction / repulsion force?

** Model a specific visual effect using a particle system -- fire, smoke, explosion, waterfall, etc.

** Create a simulation of an object shattering into many pieces.  How can you turn one large shape into thousands of small particles?

** Create a particle system in which each particle responds to every other particle.  (Note we'll be doing this in detail in Week 6.

** (There are more exercise suggestions in the PDF for this week)

*Week 5 -- Feb 21/22 -- Physics Libraries: Box2D*

* Box2D: http://box2d.org/[http://box2d.org/]

* Core material

** http://itp.nyu.edu/varwiki/Nature/Book[Chapter 5 from Nature of Code book]

** Code: https://github.com/shiffman/The-Nature-of-Code/tree/master/chp5_physicslibraries[https://github.com/shiffman/The-Nature-of-Code/tree/master/chp5_physicslibraries]

** PBox2D source: https://github.com/shiffman/PBox2D[https://github.com/shiffman/PBox2D]

** Download library: http://www.shiffman.net/p5/libraries/pbox2d/pbox2d.zip[http://www.shiffman.net/p5/libraries/pbox2d/pbox2d.zip]    

* Supplemental Reading: This isn't terribly exciting, but read the http://www.box2d.org/manual.html[Box2D manual].  It's actually quite helpful for the concepts (you can ignore the code and focus on our class examples instead.)

* Homework: Your midterm assignment (/varwiki/Nature/Midterm-T-12[Midterm-T-12], /varwiki/Nature/Midterm-W-12[Midterm-W-12]) can be anything that _build off of_ or _is inspired by_ the concepts we've covered this first half of the semester (motion and physics).  You should feel free to think non-traditionally, i.e. your midterm need not be a Processing sketch.  The midterm does not need to be a fully realized project, it is useful to use this time to build out a single component of a larger idea.  If you are stuck, feel free to come and talk to me.  Or try one of these suggestions:

** Extend one of the examples into 3D

** Design a simulation of a single creature (that you imagine living in a larger eco-system).

** Develop a non keyboard/mouse way of interacting with an environments' forces (i.e. video tracking, sensors, etc.)

** Use physics simulation to fabricate something -- a print, a sculpture, etc.
    

*Week 6 -- Feb 28/29 -- Physics Libraries: more Box2D and Toxiclibs*

* Toxiclibs: http://toxiclibs.org/[http://toxiclibs.org/]

* Connected systems (using toxiclibs springs and Box2D joints)

* A bit more on inheritance + interfaces 

** Java tutorial: http://java.sun.com/docs/books/tutorial/java/IandI/createinterface.html[http://java.sun.com/docs/books/tutorial/java/IandI/createinterface.html]

** with box2d ContactListener: http://www.shiffman.net/2010/02/19/box2d-contact-listener-in-processing/[http://www.shiffman.net/2010/02/19/box2d-contact-listener-in-processing/]
    
* Core material

** http://itp.nyu.edu/varwiki/Nature/Book[Chapter 5 from Nature of Code book]


** Code: https://github.com/shiffman/The-Nature-of-Code/tree/master/chp5_physicslibraries[https://github.com/shiffman/The-Nature-of-Code/tree/master/chp5_physicslibraries]

** Toxiclibs: http://toxiclibs.org/[http://toxiclibs.org/]

* Assignment: Complete midterm project, post link to wiki (/varwiki/Nature/Midterm-T-12[Midterm-T-12], /varwiki/Nature/Midterm-W-12[Midterm-W-12]) and be prepared to present next week.  

** Please include both visual and text documentation of your project, i.e. you might include a short paragraph description, links to relevant projects, video documentation, screenshots, or online applet, etc.    The midterm need not be a finished project, it is useful to use this time to build out a single component of a larger idea.

** Each presentation should be less than 10 minutes total.   Plan to talk very briefly about the larger idea and demo your implementation, giving yourself only *2-3 minutes* (you may use your own laptop or the classroom laptop).  This will allow for time for feedback / discussion.  

** In addition to whatever prototype implementation you preset, I encourage you to use drawings, images, video, and text to describe your idea

** We will follow the order below so feel free to move things around if you would like to present earlier or later in class, before or after break, etc. (Since the class is 18 students a few of you at the bottom of the list have a chance of being pushed a week later.)

*Week 7 -- Mar 6/7 -- Present Midterm*

*Week 8 -- Mar 20/21 -- Autonomous Agents and Complex Systems*


* Autonomous Agents and Steering Behaviors

** Steering

** Dot Product + Path Following
    
* Group Behaviors

** Craig Reynolds' Flocking Boids -- Alignment, Cohesion, Separation    

* Core material

** http://itp.nyu.edu/varwiki/Nature/Book[Chapter 6 from Nature of Code book]

** Code: https://github.com/shiffman/The-Nature-of-Code/tree/master/chp6_steering[https://github.com/shiffman/The-Nature-of-Code/tree/master/chp6_steering]

** http://www.red3d.com/cwr/steer/gdc99/[Steering Behaviors For Autonomous Characters], http://www.red3d.com/cwr/[Craig Reynolds]

* Supplemental Reading

** Handout provided via listserv about http://en.wikipedia.org/wiki/Braitenberg_vehicles[Braitenberg Vehicles.] http://www.amazon.com/Vehicles-Experiments-Psychology-Valentino-Braitenberg/dp/0262521121[Vehicles book]

** Chapter 16 — Autonomous Agents and Self-Organization, The Computational Beauty of Nature, Gary William Flake, 

** http://ddi.cs.uni-potsdam.de/HyFISCH/Produzieren/lis_projekt/proj_gamelife/ConwayScientificAmerican.htm[Conway's Game of Life], Scientific American, 1970

** http://llk.media.mit.edu/projects/emergence/index.html[Exploring Emergence], Mitchel Resnick and Brian Silverman Epistemology and Learning Group MIT Media Laboratory

** http://www.nytimes.com/2007/11/13/science/13traff.html?_r=1&oref=slogin[From Ants to People, an instinct to Swarm]
    
* Assignment: Choose one of the following options or create your own.

** Midterm Expansion

** Develop your midterm project one step further based on class feedback / discussion.

** Final Project Experiment

** Take a first step towards a final project

** Individual Behaviors

** Implement seeking a moving target, often referred to as “pursuit.“  In this case, your desired vector won't point towards the object's current location, rather its “future“ location as extrapolated based on its current velocity.

** Create a sketch where a Vehicle's maximum force and maximum speed do not remain constant, but rather vary according to environmental factors.

** Create a flow field that changes over time

** Create a flow field based on image data

** Expand the path following example to have a path that changes over time.  Can the points that define the path itself have their own steering behaviors?

** Create something inspired by Braitenberg's Vehicles

** Flocking

** Implement Flake's "View" rule, described in Computational Beauty of Nature

** Create a flocking simulation where all of the parameters (separation weight, cohesion weight, alignment weight, maximum force, maximum speed) change over time.  They could be controlled by Perlin noise or by user interaction.
    
** Build a creature with countless steering behaviors (as many as you can reasonably add).  Think about ways to vary the weights of these behaviors so that you can dial those behaviors up and down, mixing and matching on the fly.    How are creatures' initial weights set?  What rules drive how the weights change over time?

** Use applyForce() in Box2D or addForce() in Toxiclibs to create a flocking simulation in one of those physics engines

** Complex systems can be nested.  Can you design a single creature out of a flock of boids?  And can you then make a flock of those creatures?

** Cellular Automata (you'll have to read ahead to next week's examples)

** Combine CA with the flocking example -- what happens if you assign each boid a "state" which influences its behavior?

** Consider the state of a cell to be its color.  What types of image processing filters can you create using the principles of Cellular Automata?

** Develop your own rules for a Cellular Automata, 1D or 2D.   This could be something completely made up or a simulation of real-world phenomena.  For example, forest fires: [http://en.wikipedia.org/wiki/Forest-fire_model[http://en.wikipedia.org/wiki/Forest-fire_model]] or Predator, Prey [p. 191 of Computational Beauty of Nature.]

** Develop an alternative "Game of Life" with time as factor, i.e. what does it mean for a cell to be "alive" or "dead" for many frames in a row.
    
*Week 9 -- Mar 27/28 -- Cellular Automata*

* Cellular Automata

** Wolfram CA

** The Game of Life    

* Fractals, MandelBrot Set

* Recursion

* L-Systems

* Core material

** http://itp.nyu.edu/varwiki/Nature/Book[Chapter 7 from Nature of Code book]

** Code: https://github.com/shiffman/The-Nature-of-Code/tree/master/chp7_CA[https://github.com/shiffman/The-Nature-of-Code/tree/master/chp7_CA]
    
* Supplemental Reading

** http://www.ibiblio.org/lifepatterns/october1970.html[The fantastic combinations of John Conway's new solitaire game "life"], Scientific American, 223 (October 1970): 120-123.

** The Computational Beauty of Nature, Chapter 15, Cellular Automata, Computational Beauty of Nature, Flake
    
* Assignment: Prepare a final project proposal. Include in your proposal a title, brief description, and links to things you want to show / talk about -- work that inspired you, reference pages, sketches you've made, sample programs/code, previous projects, etc. Schedule: http://itp.nyu.edu/varwiki/Nature/Final1-T-12[Tues], http://itp.nyu.edu/varwiki/Nature/Final1-W-12[Wed]

*Week 10 -- April 3/4 -- Fractals and Final Project Proposals*

* Fractals, MandelBrot Set

* Recursion

* L-Systems

* Core material

** http://itp.nyu.edu/varwiki/Nature/Book[Chapter 8 from Nature of Code book]

** Code: https://github.com/shiffman/The-Nature-of-Code/tree/master/chp8_fractals[https://github.com/shiffman/The-Nature-of-Code/tree/master/chp8_fractals]

* Supplemental Reading

** The Computational Beauty of Nature, Gary William Flake, Chapter 5 — Self-Similarity and Fractal Geometry, Chapter 6 — L-Systems and Fractal Growth

** http://algorithmicbotany.org/papers/#abop[Algorithmic Beauty of Plants] -- suggested

** Watch: http://video.pbs.org/video/1050932219/[Nova: The Hidden Dimension], http://www.youtube.com/watch?v=ZbK92bRW2lQ[youtube]
    
*Week 11 -- Apr 10/11 --  Genetic Algorithms and Final Project Proposals*

* Core material

** http://itp.nyu.edu/varwiki/Nature/Book[Chapter 9 from Nature of Code book]

** Code: https://github.com/shiffman/The-Nature-of-Code/tree/master/chp9_ga[https://github.com/shiffman/The-Nature-of-Code/tree/master/chp9_ga]

* Reading: The Computational Beauty of Nature, Gary William Flake, Chapter 20 — Genetics and Evolution

* Reading: http://karlsims.com/papers/siggraph94.pdf[Evolved Virtual Creatures, Karl Sims, Siggraph 1994]

* Reading: http://karlsims.com/papers/siggraph91.html[Artificial Evolution for Computer Graphics], Karl Sims (ACM SIGGRAPH '91 Conference Proceedings, Las Vegas, Nevada, July 1991.)

* Schedule is here: http://itp.nyu.edu/varwiki/Nature/Final1-T-12[Tues], http://itp.nyu.edu/varwiki/Nature/Final1-W-12[Wed]

*Week 12 -- Apr 17/18 -- Neural Networks and Final Project Proposals*


* Core material

** http://itp.nyu.edu/varwiki/Nature/Book[Chapter 10 from Nature of Code book]

** Code: https://github.com/shiffman/The-Nature-of-Code/tree/master/chp10_nn[https://github.com/shiffman/The-Nature-of-Code/tree/master/chp10_nn]

* Schedule is here: http://itp.nyu.edu/varwiki/Nature/Final1-T-12[Tues], http://itp.nyu.edu/varwiki/Nature/Final1-W-12[Wed]

*Week 13 -- Apr 24/25 -- Optional Final Project Presentations + Final Project Workshop*


*Week 14 -- May 1/2 -- Final Project Presentations*

* Post links to documentation here: http://itp.nyu.edu/varwiki/Nature/Final2-T-12[Tues], http://itp.nyu.edu/varwiki/Nature/Final2-W-12[Wed]

*Reading Materials*

* Nature of Code Draft PDFS: http://itp.nyu.edu/varwiki/Nature/Book[http://itp.nyu.edu/varwiki/Nature/Book]

* http://cognet.mit.edu/library/books/view?isbn=0262062003[The Computational Beauty of Nature], Gary William Flake (required)

* https://www.charlesriver.com/titles/mathphysics.html[Mathematics and Physics for Programmers], Danny Kodicek.

* http://algorithmicbotany.org/papers/[Algorithmic Beauty of Plants], Przemyslaw Prusinkiewicz

* http://www.amazon.com/gp/product/0262680939/[Turtles, Termites, and Traffic Jams: Explorations in Massively Parallel Microworlds (Complex Adaptive Systems)], Mitchel Resnick

* Just about any book by http://www.amazon.com/exec/obidos/search-handle-url/index=books&field-author-exact=Ian%20Stewart&rank=-relevance%2C%2Bavailability%2C-daterank/104-8379570-6103164[Ian Stewart]


*Homework*

Students are required to complete a programming exercise each week.  Documentation for each assignment should be posted to the linked wiki page.  

*Requirements: (no incompletes)*

* 50% homeworks

* 30% final project

* 20% class participation, attendance